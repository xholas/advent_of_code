# A
# .##. .##.
# #..# #..#
# #11# #..#
# #..# #22#
# #..# #..#
# #..# #..#
A_OPTS = [
    [
        '.##.',
        '#..#',
        '####',
        '#..#',
        '#..#',
        '#..#',
    ],
    [
        '.##.',
        '#..#',
        '#..#',
        '####',
        '#..#',
        '#..#',
    ],
]

# B
# ###. ###.
# #..# #..#
# #11. #..2
# #..1 #22.
# #..# #..#
# ###. ###.
B_OPTS = [
    [
        '###?',
        '#..#',
        '###.',
        '#..#',
        '#..#',
        '###?',
    ],
    [
        '###?',
        '#..#',
        '#..#',
        '###.',
        '#..#',
        '###?',
    ],
]

# C
# ?##1 ?##?
# #... #..2
# #... #...
# #... #...
# #... #..2
# ?##1 ?##?
C_OPTS = [
    [
        '?###',
        '#...',
        '#...',
        '#...',
        '#...',
        '?###',
    ],
    [
        '?##?',
        '#..#',
        '#...',
        '#...',
        '#..#',
        '?##?',
    ],
]

# D
# ###.
# #..#
# #..#
# #..#
# #..#
# ###.
D_OPTS = [
    [
        '###.',
        '#..#',
        '#..#',
        '#..#',
        '#..#',
        '###.',
    ],
]

# E
# #### ####
# #... #...
# #1?? #...
# #... #2??
# #... #...
# #### ####
E_OPTS = [
    [
        '####',
        '#...',
        '##??',
        '#...',
        '#...',
        '####',
    ],
    [
        '####',
        '#...',
        '#...',
        '##??',
        '#...',
        '####',
    ],
]

# F
# #### ####
# #... #...
# #1?? #...
# #... #2??
# #... #...
# #... #...
F_OPTS = [
    [
        '####',
        '#...',
        '##??',
        '#...',
        '#...',
        '#...',
    ],
    [
        '####',
        '#...',
        '#...',
        '##??',
        '#...',
        '#...',
    ],
]

# G
# ?##? ?##?
# #..? #...
# #... #.2?
# #.1? #..2
# #..# #..#
# ?##? ?##?
G_OPTS = [
    [
        '?##?',
        '#..?',
        '#...',
        '#.#?',
        '#..#',
        '?##?',
    ],
    [
        '?##?',
        '#...',
        '#.#?',
        '#..#',
        '#..#',
        '?##?',
    ],
]

# H
# #..# #..#
# #..# #..#
# #11# #..#
# #..# #22#
# #..# #..#
# #..# #..#
H_OPTS = [
    [
        '#..#',
        '#..#',
        '####',
        '#..#',
        '#..#',
        '#..#',
    ],
    [
        '#..#',
        '#..#',
        '#..#',
        '####',
        '#..#',
        '#..#',
    ],
]

# I
# 1... ?2?. .?3? ...4
# 1... .2.. ..3. ...4
# 1... .2.. ..3. ...4
# 1... .2.. ..3. ...4
# 1... .2.. ..3. ...4
# 1... ?2?. .?3? ...4
I_OPTS = [
    [
        '#...',
        '#...',
        '#...',
        '#...',
        '#...',
        '#...',
    ],
    [
        '?#?.',
        '.#..',
        '.#..',
        '.#..',
        '.#..',
        '?#?.',
    ],
    [
        '.?#?',
        '..#.',
        '..#.',
        '..#.',
        '..#.',
        '.?#?',
    ],
    [
        '...#',
        '...#',
        '...#',
        '...#',
        '...#',
        '...#',
    ],
]

# J
# ???# ???# - !! only ...# ..## .### ####
# ...# ...#
# ...# ...#
# ...# ...#
# 1..# ...#
# ?##? ###?
J_OPTS = [
    [
        '???#',
        '...#',
        '...#',
        '...#',
        '#..#',
        '?##?',
    ],
    [
        '???#',
        '...#',
        '...#',
        '...#',
        '...#',
        '###?',
    ],
]

# K
# #..# #..# #..# #..#
# #.?1 #.2? #..3 #.?4
# #11. #2.. #.?3 #.4?
# #.?1 #.2? #33. #4..
# #..1 #.?2 #.?3 #.4?
# #..# #..# #..# #..#
K_OPTS = [
    [
        '#..#',
        '#.?#',
        '###.',
        '#.?#',
        '#..#',
        '#..#',
    ],
    [
        '#..#',
        '#.#?',
        '##..',
        '#.#?',
        '#.?#',
        '#..#',
    ],
    [
        '#..#',
        '#..#',
        '#.?#',
        '###.',
        '#.?#',
        '#..#',
    ],
    [
        '#..#',
        '#.?#',
        '#.#?',
        '##..',
        '#.#?',
        '#..#',
    ],
]

# L
# #...
# #...
# #...
# #...
# #...
# ####
L_OPTS = [
    [
        '#...',
        '#...',
        '#...',
        '#...',
        '#...',
        '####',
    ],
]

# M - may be impossible
# - undefined until usage found
# ....
# ....
# ....
# ....
# ....
# ....
M_OPTS = [
]

# N
# #1.# #?.# #..# #..#
# #.1# #2.# #?.# #..#
# #.?# #.2# #3.# #?.#
# #..# #.?# #.3# #4.#
# #..# #..# #.?# #.4#
# #..# #..# #..# #.?#
N_OPTS = [
    [
        '##.#',
        '#.##',
        '#.?#',
        '#..#',
        '#..#',
        '#..#',
    ],
    [
        '#?.#',
        '##.#',
        '#.##',
        '#.?#',
        '#..#',
        '#..#',
    ],
    [
        '#..#',
        '#?.#',
        '##.#',
        '#.##',
        '#.?#',
        '#..#',
    ],
    [
        '#..#',
        '#..#',
        '#?.#',
        '##.#',
        '#.##',
        '#.?#',
    ],
]

# O
# .##.
# #..#
# #..#
# #..#
# #..#
# .##.
O_OPTS = [
    [
        '.##.',
        '#..#',
        '#..#',
        '#..#',
        '#..#',
        '.##.',
    ],
]

# P
# ###? ###?
# #..# #..#
# ###? #..#
# #... ###?
# #... #...
# #... #...
P_OPTS = [
    [
        '###?',
        '#..#',
        '###?',
        '#...',
        '#...',
        '#...',
    ],
    [
        '###?',
        '#..#',
        '#..#',
        '###?',
        '#...',
        '#...',
    ],
]

# Q - may be hard to distinguish
# - undefined until usage found
# ....
# ....
# ....
# ....
# ....
# ....
Q_OPTS = [
]

# R
# ###? ###? ###? ###? ###? ###?
# #..# #..# #..# #..# #..# #..#
# ###. ###? ###? #.?# #.?# #.#?
# #.?# #.#. #.#. ###. ###. ##?.
# #.?# #.?# #.#? #.?# #.#? #.#?
# #..# #..# #..# #..# #..# #..#
R_OPTS = [
    [
        '###?',
        '#..#',
        '###.',
        '#.?#',
        '#.?#',
        '#..#',
    ],
    [
        '###?',
        '#..#',
        '###?',
        '#.#.',
        '#.?#',
        '#..#',
    ],
    [
        '###?',
        '#..#',
        '###?',
        '#.#.',
        '#.#?',
        '#..#',
    ],
    [
        '###?',
        '#..#',
        '#.?#',
        '###.',
        '#.?#',
        '#..#',
    ],
    [
        '###?',
        '#..#',
        '#.?#',
        '###.',
        '#.#?',
        '#..#',
    ],
    [
        '###?',
        '#..#',
        '#.#?',
        '##?.',
        '#.#?',
        '#..#',
    ],
]

# S
# ?### ?### ?### ?##?
# #... #... #..? #..#
# ?##? ?##? #... #...
# ...# ...# ?##? ?##?
# ?..# #..# ...# ...#
# ###? ?##? ###? ###?
S_OPTS = [
    [
        '?###',
        '#...',
        '?##?',
        '...#',
        '?..#',
        '###?',
    ],
    [
        '?###',
        '#...',
        '?##?',
        '...#',
        '#..#',
        '?##?',
    ],
    [
        '?###',
        '#..?',
        '#...',
        '?##?',
        '...#',
        '###?',
    ],
    [
        '?##?',
        '#..#',
        '#...',
        '?##?',
        '...#',
        '###?',
    ],
]

# T
# #### #### #### ####
# .#.. ..#. .#.. ..#.
# .#.. ..#. .#.. ..#.
# .#.. ..#. .??. .??.
# .#.. ..#. ..#. .#..
# .#.. ..#. ..#. .#..
T_OPTS = [
    [
        '####',
        '.#..',
        '.#..',
        '.#..',
        '.#..',
        '.#..',
    ],
    [
        '####',
        '..#.',
        '..#.',
        '..#.',
        '..#.',
        '..#.',
    ],
    [
        '####',
        '.#..',
        '.#..',
        '.??.',
        '..#.',
        '..#.',
    ],
    [
        '####',
        '..#.',
        '..#.',
        '.??.',
        '.#..',
        '.#..',
    ],
]

# U
# #..#
# #..#
# #..#
# #..#
# #..#
# ?##?
U_OPTS = [
    [
        '#..#',
        '#..#',
        '#..#',
        '#..#',
        '#..#',
        '?##?',
    ],
]

# V
# #..# #..# #..# #..#
# #..# #..# #..# #..#
# #..# #.?# #..# #?.#
# #.?# #.#? #?.# ?#.#
# #.#? #.#. ?#.# .#.#
# .#.. .#.. ..#. ..#.
V_OPTS = [
    [
        '#..#',
        '#..#',
        '#..#',
        '#.?#',
        '#.#?',
        '.#..',
    ],
    [
        '#..#',
        '#..#',
        '#.?#',
        '#.#?',
        '#.#.',
        '.#..',
    ],
    [
        '#..#',
        '#..#',
        '#..#',
        '#?.#',
        '?#.#',
        '..#.',
    ],
    [
        '#..#',
        '#..#',
        '#?.#',
        '?#.#',
        '.#.#',
        '..#.',
    ],
]

# W - may be impossible
# - undefined until usage found
# ....
# ....
# ....
# ....
# ....
# ....
W_OPTS = [
]

# X
# #..# #..# #..# #..# #..#
# #..# #..# #..# #..# #..#
# .##. #..# .##. .#.# #.#.
# #..# .##. .##. #.#. .#.#
# #..# #..# #..# #..# #..#
# #..# #..# #..# #..# #..#
X_OPTS = [
    [
        '#..#',
        '#..#',
        '.##.',
        '#..#',
        '#..#',
        '#..#',
    ],
    [
        '#..#',
        '#..#',
        '#..#',
        '.##.',
        '#..#',
        '#..#',
    ],
    [
        '#..#',
        '#..#',
        '.##.',
        '.##.',
        '#..#',
        '#..#',
    ],
    [
        '#..#',
        '#..#',
        '.#.#',
        '#.#.',
        '#..#',
        '#..#',
    ],
    [
        '#..#',
        '#..#',
        '#.#.',
        '.#.#',
        '#..#',
        '#..#',
    ],
]

# Y
# #..# #..# #..# #..# #..#
# #??# #??# #?.# #..# #??#
# ?##? ?##? ???# .##. ????
# ..#. .#.. .??# ..#. ...#
# ..#. .#.. ..?# ..#. ..?#
# ..#. .#.. ...# .#?. .?#?
Y_OPTS = [
    [
        '#..#',
        '#??#',
        '?##?',
        '..#.',
        '..#.',
        '..#.',
    ],
    [
        '#..#',
        '#??#',
        '?##?',
        '.#..',
        '.#..',
        '.#..',
    ],
    [
        '#..#',
        '#?.#',
        '???#',
        '.??#',
        '..?#',
        '...#',
    ],
    [
        '#..#',
        '#??#',
        '?##?',
        '..#.',
        '..#.',
        '.#?.',
    ],
    [
        '#..#',
        '#??#',
        '????',
        '...#',
        '..?#',
        '.?#?',
    ],
]

# Z
# #### #### ####
# ..?# ..?# ...#
# ?##? .?#? ..?#
# #?.. ?#?. ?##?
# #... #?.. #?..
# #### #### ####
Z_OPTS = [
    [
        '####',
        '..?#',
        '?##?',
        '#?..',
        '#...',
        '####',
    ],
    [
        '####',
        '..?#',
        '.?#?',
        '?#?.',
        '#?..',
        '####',
    ],
    [
        '####',
        '...#',
        '..?#',
        '?##?',
        '#?..',
        '####',
    ],
]

OPTS = [
    A_OPTS,
    B_OPTS,
    C_OPTS,
    D_OPTS,
    E_OPTS,
    F_OPTS,
    G_OPTS,
    H_OPTS,
    I_OPTS,
    J_OPTS,
    K_OPTS,
    L_OPTS,
    M_OPTS,
    N_OPTS,
    O_OPTS,
    P_OPTS,
    Q_OPTS,
    R_OPTS,
    S_OPTS,
    T_OPTS,
    U_OPTS,
    V_OPTS,
    W_OPTS,
    X_OPTS,
    Y_OPTS,
    Z_OPTS,
]

PIX_LIT = '#'
PIX_DARK = '.'


def letter_match(letter, opts):
    for letter_idx, opt in enumerate(opts):
        # Test full match for each option
        # print('Letter/opt:')
        # print(letter)
        # print(opt)
        match = True
        for row_letter, row_opt in zip(letter, opt):
            for char_letter, char_opt in zip(row_letter, row_opt):
                if char_opt == '?':
                    continue
                if char_opt == '#' and char_letter == PIX_LIT:
                    continue
                if char_opt == '.' and char_letter == PIX_DARK:
                    continue
                # Not a match
                match = False
                break
            if not match:
                break
        if match:
            return True
    return False


def recognize_letter(letter, pix_lit=PIX_LIT, pix_dark=PIX_DARK):
    # Maybe more simple approach - as I know that the letters are limited to 6*4 grid
    global PIX_LIT
    global PIX_DARK
    PIX_LIT = pix_lit
    PIX_DARK = pix_dark
    # print('Test lit: ' + PIX_LIT)
    # print('Test dark: ' + PIX_DARK)

    for char_idx, letter_opts in enumerate(OPTS):
        if letter_match(letter, letter_opts):
            return chr(ord('A') + char_idx)

    return '_'


if __name__ == '__main__':
    # Test the module
    # O
    letter_O = [
        [PIX_DARK, PIX_LIT, PIX_LIT, PIX_DARK],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
        [PIX_DARK, PIX_LIT, PIX_LIT, PIX_DARK],
    ]
    letter_R = [
        [PIX_LIT, PIX_LIT, PIX_LIT, PIX_DARK],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
        [PIX_LIT, PIX_LIT, PIX_LIT, PIX_DARK],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
        [PIX_LIT, PIX_DARK, PIX_DARK, PIX_LIT],
    ]
    print(recognize_letter(letter_O))
    print(recognize_letter(letter_R))
